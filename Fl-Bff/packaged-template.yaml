AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  VpcId:
    Type: String
    Description: VPC ID for Lambda deployment
    Default: vpc-xxxxxxxxx
  PublicSubnetId:
    Type: String
    Description: Public subnet for NAT Gateway (GitHub API access)
    Default: subnet-xxxxxxxxx
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: Private subnets for Lambda deployment
    Default: subnet-yyyyyyyyy,subnet-zzzzzzzzz,subnet-aaaaaaaaa
  DatabaseHost:
    Type: String
    Description: PostgreSQL database host
    Default: your-db-host.amazonaws.com
  DatabasePort:
    Type: String
    Description: PostgreSQL database port
    Default: '5432'
  DatabaseName:
    Type: String
    Description: PostgreSQL database name
    Default: your-database-name
  DatabaseUser:
    Type: String
    Description: PostgreSQL database user
    Default: your-db-user
  DatabasePassword:
    Type: String
    Description: PostgreSQL database password
    NoEcho: true
    Default: your-db-password
Globals:
  Function:
    Timeout: 30
    MemorySize: 1024
    Runtime: nodejs20.x
    Architectures:
    - arm64
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    EphemeralStorage:
      Size: 512
  Api:
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"
      MaxAge: 600
Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId:
        Ref: VpcId
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        Description: HTTPS outbound for GitHub API
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        Description: HTTP outbound
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 10.0.0.0/8
        Description: PostgreSQL database access
      Tags:
      - Key: Name
        Value: lambda-security-group
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATGatewayEIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnetId
      Tags:
      - Key: Name
        Value: lambda-nat-gateway
  NodeModulesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nest-dependencies
      Description: Node modules for Nest.js application
      ContentUri: s3://fl-bff-lambda-deployment-1718075595/76cdb2bad9582d23c1f6f4d868218d6c
      CompatibleRuntimes:
      - nodejs20.x
      RetentionPolicy: Retain
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      BinaryMediaTypes:
      - image/*
      - multipart/form-data
      Auth:
        DefaultAuthorizer: NONE
  NestjsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      SkipBuild: true
    Properties:
      Handler: lambda.handler
      CodeUri: s3://fl-bff-lambda-deployment-1718075595/60d4d1659dcc45d7fa4db0e172a06588
      MemorySize: 3008
      Timeout: 30
      Layers:
      - Ref: NodeModulesLayer
      Environment:
        Variables:
          NODE_OPTIONS: --enable-source-maps
          DB_HOST:
            Ref: DatabaseHost
          DB_PORT:
            Ref: DatabasePort
          DB_NAME:
            Ref: DatabaseName
          DB_USER:
            Ref: DatabaseUser
          DB_PASSWORD:
            Ref: DatabasePassword
          DB_TYPE: postgres
          DB_SYNCHRONIZE: 'true'
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
          Ref: PrivateSubnetIds
      Policies:
      - S3CrudPolicy:
          BucketName: aladdinagi-assets
      - VPCAccessPolicy: {}
      - Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:AttachNetworkInterface
          - ec2:DetachNetworkInterface
          Resource: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId:
              Ref: Api
            Auth:
              Authorizer: NONE
      AutoPublishAlias: live
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiEndpoint
  FunctionArn:
    Description: Lambda Function ARN
    Value:
      Fn::GetAtt:
      - NestjsFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-FunctionArn
  SecurityGroupId:
    Description: Lambda Security Group ID
    Value:
      Ref: LambdaSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SecurityGroupId
  NATGatewayId:
    Description: NAT Gateway ID
    Value:
      Ref: NATGateway
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-NATGatewayId
